{"ast":null,"code":"/*\nimport React, { useEffect } from 'react';\nimport { Formik, Form, Field, ErrorMessage, useFormikContext } from 'formik';\nimport * as Yup from 'yup';\n\nfunction TaskForm({ onTaskAdded, onTaskUpdated, editingTask }) {\n    const { setValues } = useFormikContext(); // Access setValues from useFormikContext()\n\n    const initialValues = {\n        name: editingTask ? editingTask.name : '',\n        description: editingTask ? editingTask.description : '',\n        due_date: editingTask ? editingTask.due_date : ''\n    };\n\n    const validationSchema = Yup.object({\n        name: Yup.string().required('Required'),\n        description: Yup.string().required('Required'),\n        due_date: Yup.string().required('Required')\n    });\n\n    useEffect(() => {\n        // Reset form values when editingTask changes\n        setValues(initialValues);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [editingTask, setValues]); // Include setValues in the dependency array to satisfy exhaustive-deps rule\n\n    const handleSubmit = (values, { setSubmitting, resetForm }) => {\n        if (editingTask) {\n            onTaskUpdated({ ...values, id: editingTask.id });\n        } else {\n            onTaskAdded(values);\n        }\n        resetForm();\n        setSubmitting(false);\n    };\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={handleSubmit}\n            enableReinitialize\n        >\n            {({ isSubmitting }) => (\n                <Form className=\"bg-white shadow-sm rounded px-4 pt-4 pb-4 mb-4\">\n                    <div className=\"mb-3\">\n                        <label htmlFor=\"name\" className=\"form-label text-gray-700\">\n                            Name\n                        </label>\n                        <Field\n                            type=\"text\"\n                            name=\"name\"\n                            className=\"form-control\"\n                        />\n                        <ErrorMessage name=\"name\" component=\"div\" className=\"text-danger small\" />\n                    </div>\n                    <div className=\"mb-3\">\n                        <label htmlFor=\"description\" className=\"form-label text-gray-700\">\n                            Description\n                        </label>\n                        <Field\n                            as=\"textarea\"\n                            name=\"description\"\n                            className=\"form-control\"\n                            rows=\"3\"\n                        />\n                        <ErrorMessage name=\"description\" component=\"div\" className=\"text-danger small\" />\n                    </div>\n                    <div className=\"mb-3\">\n                        <label htmlFor=\"due_date\" className=\"form-label text-gray-700\">\n                            Due Date\n                        </label>\n                        <Field\n                            type=\"date\"\n                            name=\"due_date\"\n                            className=\"form-control\"\n                        />\n                        <ErrorMessage name=\"due_date\" component=\"div\" className=\"text-danger small\" />\n                    </div>\n                    <div className=\"d-flex justify-content-end\">\n                        <button\n                            type=\"submit\"\n                            disabled={isSubmitting}\n                            className=\"btn btn-primary\"\n                        >\n                            {isSubmitting ? 'Submitting...' : editingTask ? 'Update Task' : 'Add Task'}\n                        </button>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    );\n}\n\nexport default TaskForm;\n*/","map":{"version":3,"names":[],"sources":["/home/jeff/Development/code/se-prep/Phase-4-project-management-system/frontend/src/component/TaskForm.js"],"sourcesContent":["/*\nimport React, { useEffect } from 'react';\nimport { Formik, Form, Field, ErrorMessage, useFormikContext } from 'formik';\nimport * as Yup from 'yup';\n\nfunction TaskForm({ onTaskAdded, onTaskUpdated, editingTask }) {\n    const { setValues } = useFormikContext(); // Access setValues from useFormikContext()\n\n    const initialValues = {\n        name: editingTask ? editingTask.name : '',\n        description: editingTask ? editingTask.description : '',\n        due_date: editingTask ? editingTask.due_date : ''\n    };\n\n    const validationSchema = Yup.object({\n        name: Yup.string().required('Required'),\n        description: Yup.string().required('Required'),\n        due_date: Yup.string().required('Required')\n    });\n\n    useEffect(() => {\n        // Reset form values when editingTask changes\n        setValues(initialValues);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [editingTask, setValues]); // Include setValues in the dependency array to satisfy exhaustive-deps rule\n\n    const handleSubmit = (values, { setSubmitting, resetForm }) => {\n        if (editingTask) {\n            onTaskUpdated({ ...values, id: editingTask.id });\n        } else {\n            onTaskAdded(values);\n        }\n        resetForm();\n        setSubmitting(false);\n    };\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={handleSubmit}\n            enableReinitialize\n        >\n            {({ isSubmitting }) => (\n                <Form className=\"bg-white shadow-sm rounded px-4 pt-4 pb-4 mb-4\">\n                    <div className=\"mb-3\">\n                        <label htmlFor=\"name\" className=\"form-label text-gray-700\">\n                            Name\n                        </label>\n                        <Field\n                            type=\"text\"\n                            name=\"name\"\n                            className=\"form-control\"\n                        />\n                        <ErrorMessage name=\"name\" component=\"div\" className=\"text-danger small\" />\n                    </div>\n                    <div className=\"mb-3\">\n                        <label htmlFor=\"description\" className=\"form-label text-gray-700\">\n                            Description\n                        </label>\n                        <Field\n                            as=\"textarea\"\n                            name=\"description\"\n                            className=\"form-control\"\n                            rows=\"3\"\n                        />\n                        <ErrorMessage name=\"description\" component=\"div\" className=\"text-danger small\" />\n                    </div>\n                    <div className=\"mb-3\">\n                        <label htmlFor=\"due_date\" className=\"form-label text-gray-700\">\n                            Due Date\n                        </label>\n                        <Field\n                            type=\"date\"\n                            name=\"due_date\"\n                            className=\"form-control\"\n                        />\n                        <ErrorMessage name=\"due_date\" component=\"div\" className=\"text-danger small\" />\n                    </div>\n                    <div className=\"d-flex justify-content-end\">\n                        <button\n                            type=\"submit\"\n                            disabled={isSubmitting}\n                            className=\"btn btn-primary\"\n                        >\n                            {isSubmitting ? 'Submitting...' : editingTask ? 'Update Task' : 'Add Task'}\n                        </button>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    );\n}\n\nexport default TaskForm;\n*/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}